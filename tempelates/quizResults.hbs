<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quiz Results - QuizAI</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f8fafc;
            color: #334155;
            line-height: 1.6;
        }

        /* Header */
        .header {
            background: white;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            max-width: 1000px;
            margin: 0 auto;
            padding: 0 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.75rem;
            font-weight: bold;
            color: #3b82f6;
        }

        .quiz-info h1 {
            font-size: 1.25rem;
            color: #1e293b;
            margin-bottom: 0.25rem;
        }

        .quiz-meta {
            font-size: 0.85rem;
            color: #64748b;
        }

        /* Main Content */
        .main-content {
            max-width: 1000px;
            margin: 0 auto;
            padding: 2rem 1rem;
        }

        /* Results Summary */
        .results-summary {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
            text-align: center;
        }

        .score-display {
            font-size: 3rem;
            font-weight: bold;
            color: #10b981;
            margin-bottom: 1rem;
        }

        .score-details {
            color: #64748b;
            margin-bottom: 2rem;
        }

        .btn {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.1s ease;
            font-size: 0.9rem;
            text-decoration: none;
            display: inline-block;
            text-align: center;
            margin: 0 0.5rem;
        }

        .btn:hover {
            background: #2563eb;
            transform: translateY(-1px);
        }

        .btn-secondary {
            background: #64748b;
        }

        .btn-secondary:hover {
            background: #475569;
        }

        /* Question Results */
        .question-results {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 2rem;
        }

        .question-item {
            border-bottom: 1px solid #e2e8f0;
            padding: 1.5rem 0;
        }

        .question-item:last-child {
            border-bottom: none;
        }

        .question-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1rem;
        }

        .question-number {
            font-size: 0.9rem;
            color: #64748b;
            margin-bottom: 0.5rem;
        }

        .question-text {
            font-size: 1.1rem;
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 1rem;
            line-height: 1.5;
        }

        .result-badge {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: bold;
            margin-left: 1rem;
        }

        .correct {
            background: #dcfce7;
            color: #16a34a;
        }

        .wrong {
            background: #fee2e2;
            color: #dc2626;
        }

        /* Answer Options */
        .answer-options {
            margin-bottom: 1rem;
        }

        .answer-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 0;
            font-size: 0.95rem;
        }

        .answer-label {
            font-weight: 600;
            color: #64748b;
            width: 120px;
        }

        .answer-value {
            flex: 1;
            color: #1e293b;
        }

        .answer-value.correct-answer {
            color: #16a34a;
            font-weight: 600;
        }

        .answer-value.wrong-answer {
            color: #dc2626;
            font-weight: 600;
        }

        /* AI Explanation Section */
        .explanation-section {
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid #e2e8f0;
        }

        .explain-btn {
            background: #8b5cf6;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-size: 0.85rem;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .explain-btn:hover {
            background: #7c3aed;
            transform: translateY(-1px);
        }

        .explain-btn:disabled {
            background: #94a3b8;
            cursor: not-allowed;
            transform: none;
        }

        .explanation-content {
            margin-top: 1rem;
            padding: 1rem;
            background: #f0f9ff;
            border-left: 4px solid #3b82f6;
            border-radius: 6px;
            display: none;
        }

        .explanation-content.show {
            display: block;
        }

        .explanation-text {
            color: #1e293b;
            font-size: 0.95rem;
            line-height: 1.6;
            margin-bottom: 0.5rem;
        }

        .explanation-meta {
            font-size: 0.8rem;
            color: #64748b;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .cached-indicator {
            background: #dcfce7;
            color: #16a34a;
            padding: 0.125rem 0.5rem;
            border-radius: 12px;
            font-size: 0.7rem;
        }

        /* Loading States */
        .loading-explanation {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: #64748b;
            font-size: 0.85rem;
        }

        .loading-spinner {
            width: 16px;
            height: 16px;
            border: 2px solid #e2e8f0;
            border-top: 2px solid #3b82f6;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Mobile Responsiveness */
        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }

            .main-content {
                padding: 1rem 0.5rem;
            }

            .results-summary,
            .question-results {
                padding: 1.5rem;
            }

            .score-display {
                font-size: 2.5rem;
            }

            .question-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.5rem;
            }

            .result-badge {
                margin-left: 0;
                margin-top: 0.5rem;
            }

            .answer-row {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.25rem;
            }

            .answer-label {
                width: auto;
            }
        }

        @media (max-width: 480px) {
            .btn {
                display: block;
                width: 100%;
                margin: 0.25rem 0;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header class="header">
        <div class="header-content">
            <div class="logo">QuizAI</div>
            <div class="quiz-info">
                <h1 id="quizTitle">Quiz Completed!</h1>
                <div class="quiz-meta">
                    Student: <span id="studentName"></span>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-content">
        <!-- Results Summary -->
        <div class="results-summary">
            <div class="score-display" id="scoreDisplay">-</div>
            <div class="score-details" id="scoreDetails">
                Loading your results...
            </div>
            <div>
                <a href="/homeStudent" class="btn">Back to Dashboard</a>
                <button class="btn btn-secondary" onclick="retakeQuiz()">Take Another Quiz</button>
            </div>
        </div>

        <!-- Question Results -->
        <div class="question-results">
            <h2 class="section-title">📋 Detailed Results</h2>
            <div id="questionResultsContainer">
                <div style="text-align: center; padding: 2rem; color: #64748b;">
                    Loading question results...
                </div>
            </div>
        </div>
    </main>

    <script>
        // Global variables
        let quizData = null;
        let resultsData = null;
        const studentName = localStorage.getItem('studentName') || 'Student';

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Quiz results page initializing...');
            
            // Get results from localStorage (set by takeQuiz.hbs)
            const storedResults = localStorage.getItem('quizResults');
            if (storedResults) {
                resultsData = JSON.parse(storedResults);
                displayResults();
                // Clear stored results
                localStorage.removeItem('quizResults');
            } else {
                showError('No quiz results found. Please take a quiz first.');
            }
            
            // Set student name
            document.getElementById('studentName').textContent = studentName;
        });

        // Display quiz results
        function displayResults() {
            if (!resultsData) return;

            console.log('📊 Displaying results:', resultsData);

            // Update header
            document.getElementById('quizTitle').textContent = resultsData.quizTitle || 'Quiz Completed!';

            // Update summary
            document.getElementById('scoreDisplay').textContent = resultsData.percentage.toFixed(1) + '%';
            document.getElementById('scoreDetails').innerHTML = `
                <p><strong>Score:</strong> ${resultsData.score} out of ${resultsData.totalQuestions} correct</p>
                <p><strong>Time Taken:</strong> ${formatTime(resultsData.timeTakenSeconds)}</p>
                <p><strong>Percentage:</strong> ${resultsData.percentage.toFixed(1)}%</p>
            `;

            // Display question results
            displayQuestionResults();
        }

        // Display detailed question results
        function displayQuestionResults() {
            const container = document.getElementById('questionResultsContainer');
            
            if (!resultsData.questionDetails || resultsData.questionDetails.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #64748b;">No detailed question data available.</p>';
                return;
            }

            const questionsHTML = resultsData.questionDetails.map((question, index) => {
                const isCorrect = question.studentAnswer === question.correctAnswer;
                const resultClass = isCorrect ? 'correct' : 'wrong';
                const resultText = isCorrect ? '✅ Correct' : '❌ Wrong';

                return `
                    <div class="question-item" data-question-index="${index}">
                        <div class="question-header">
                            <div>
                                <div class="question-number">Question ${index + 1}</div>
                                <div class="question-text">${question.questionText}</div>
                            </div>
                            <div class="result-badge ${resultClass}">${resultText}</div>
                        </div>

                        <div class="answer-options">
                            <div class="answer-row">
                                <span class="answer-label">Your Answer:</span>
                                <span class="answer-value ${isCorrect ? 'correct-answer' : 'wrong-answer'}">
                                    ${question.studentAnswer}) ${question.options[question.studentAnswer]}
                                </span>
                            </div>
                            <div class="answer-row">
                                <span class="answer-label">Correct Answer:</span>
                                <span class="answer-value correct-answer">
                                    ${question.correctAnswer}) ${question.options[question.correctAnswer]}
                                </span>
                            </div>
                        </div>

                        ${!isCorrect ? createExplanationSection(question, index) : ''}
                    </div>
                `;
            }).join('');

            container.innerHTML = questionsHTML;
        }

        // Create explanation section for wrong answers
        function createExplanationSection(question, questionIndex) {
            return `
                <div class="explanation-section">
                    <button class="explain-btn" onclick="requestExplanation(${questionIndex})" id="explainBtn${questionIndex}">
                        💡 Explain why ${question.correctAnswer} is correct
                    </button>
                    <div class="explanation-content" id="explanation${questionIndex}">
                        <!-- Explanation will be loaded here -->
                    </div>
                </div>
            `;
        }

        // Replace the requestExplanation function in your quizResults.hbs with this simplified version

        // STEP 5: Replace the requestExplanation function in your quizResults.hbs with this enhanced version

        async function requestExplanation(questionIndex) {
            const button = document.getElementById(`explainBtn${questionIndex}`);
            const explanationDiv = document.getElementById(`explanation${questionIndex}`);
            const question = resultsData.questionDetails[questionIndex];

            try {
                // Disable button and show loading
                button.disabled = true;
                button.innerHTML = `
                    <div class="loading-spinner"></div>
                    Getting detailed explanation...
                `;

                console.log('💡 Getting enhanced explanation for question:', questionIndex);

                // Prepare request data for enhanced explanations
                const requestData = {
                    quizId: resultsData.quizId,
                    questionIndex: questionIndex,
                    wrongAnswer: question.studentAnswer
                };

                console.log('📤 Requesting enhanced explanation:', requestData);

                // Make API request to get enhanced explanation
                const response = await fetch('/api/explanation/get', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestData)
                });

                const data = await response.json();

                if (data.success) {
                    console.log('✅ Enhanced explanation received:', {
                        type: data.explanationType,
                        length: data.explanation.length
                    });
                    
                    // Format and display enhanced explanation
                    const formattedExplanation = formatEnhancedExplanation(data.explanation, data.explanationType);
                    
                    explanationDiv.innerHTML = `
                        <div class="explanation-text">${formattedExplanation}</div>
                        <div class="explanation-meta">
                            <span>💡 ${data.explanationType === 'detailed' ? 'Detailed AI explanation' : 'AI explanation'}</span>
                            <span class="cached-indicator">${data.explanationType === 'detailed' ? 'Enhanced' : 'Basic'}</span>
                            ${data.questionDetails ? 
                                `<span class="answer-context">
                                    ${question.studentAnswer} → ${question.correctAnswer}: ${data.questionDetails.correctOption}
                                </span>` : ''
                            }
                        </div>
                    `;
                    explanationDiv.classList.add('show');

                    // Update button based on explanation type
                    if (data.explanationType === 'detailed') {
                        button.innerHTML = '✅ Detailed explanation loaded';
                        button.style.background = '#10b981';
                    } else {
                        button.innerHTML = '📝 Basic explanation loaded';
                        button.style.background = '#f59e0b';
                    }

                } else {
                    console.error('❌ Failed to get enhanced explanation:', data.message);
                    showExplanationError(explanationDiv, data.message);
                }

            } catch (error) {
                console.error('❌ Error requesting enhanced explanation:', error);
                showExplanationError(explanationDiv, 'Error loading explanation. Please try again.');
            } finally {
                // Re-enable button if there was an error
                if (!explanationDiv.classList.contains('show')) {
                    button.disabled = false;
                    button.innerHTML = `💡 Explain why ${question.correctAnswer} is correct`;
                }
            }
        }

        // NEW: Format enhanced explanations with better styling
        function formatEnhancedExplanation(explanation, type) {
            if (type === 'detailed') {
                // Handle explanations with correct answer context
                const parts = explanation.split('\n\n💡 **Why');
                
                if (parts.length > 1) {
                    const wrongAnswerExplanation = parts[0];
                    const correctAnswerExplanation = '💡 **Why' + parts[1];
                    
                    return `
                        <div class="wrong-answer-explanation">
                            <strong>Why your answer was incorrect:</strong><br>
                            ${wrongAnswerExplanation}
                        </div>
                        <div class="correct-answer-explanation">
                            ${correctAnswerExplanation.replace(/\*\*/g, '')}
                        </div>
                    `;
                } else {
                    return explanation.replace(/\n/g, '<br>');
                }
            } else {
                return explanation.replace(/\n/g, '<br>');
            }
        }

        // NEW: Check explanation status when page loads
        async function checkExplanationStatus() {
            if (!resultsData.quizId) return;
            
            try {
                const response = await fetch(`/api/quiz/${resultsData.quizId}/explanations-status`);
                const data = await response.json();
                
                if (data.success) {
                    console.log('📊 Explanation status:', data.explanationStats);
                    
                    // Show status to user if explanations are limited
                    if (!data.hasEnhancedExplanations) {
                        showExplanationWarning();
                    } else {
                        console.log('✅ Enhanced explanations available for all questions');
                    }
                }
            } catch (error) {
                console.error('❌ Error checking explanation status:', error);
            }
        }

        // NEW: Show warning if enhanced explanations aren't available
        function showExplanationWarning() {
            const warningHTML = `
                <div class="explanation-warning" style="
                    background: #fef3c7; 
                    border: 1px solid #f59e0b; 
                    border-radius: 8px; 
                    padding: 1rem; 
                    margin: 1rem 0;
                    color: #92400e;
                ">
                    <strong>📝 Note:</strong> This quiz was generated with basic explanations. 
                    For detailed explanations, teachers should regenerate the quiz with the enhanced system.
                </div>
            `;
            
            const container = document.getElementById('questionResultsContainer');
            container.insertAdjacentHTML('afterbegin', warningHTML);
        }

        // Enhanced display function that checks explanation status
        function displayQuestionResults() {
            const container = document.getElementById('questionResultsContainer');
            
            if (!resultsData.questionDetails || resultsData.questionDetails.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #64748b;">No detailed question data available.</p>';
                return;
            }

            // Check explanation status first
            checkExplanationStatus();

            const questionsHTML = resultsData.questionDetails.map((question, index) => {
                const isCorrect = question.studentAnswer === question.correctAnswer;
                const resultClass = isCorrect ? 'correct' : 'wrong';
                const resultText = isCorrect ? '✅ Correct' : '❌ Wrong';

                return `
                    <div class="question-item" data-question-index="${index}">
                        <div class="question-header">
                            <div>
                                <div class="question-number">Question ${index + 1}</div>
                                <div class="question-text">${question.questionText}</div>
                            </div>
                            <div class="result-badge ${resultClass}">${resultText}</div>
                        </div>

                        <div class="answer-options">
                            <div class="answer-row">
                                <span class="answer-label">Your Answer:</span>
                                <span class="answer-value ${isCorrect ? 'correct-answer' : 'wrong-answer'}">
                                    ${question.studentAnswer}) ${question.options[question.studentAnswer]}
                                </span>
                            </div>
                            <div class="answer-row">
                                <span class="answer-label">Correct Answer:</span>
                                <span class="answer-value correct-answer">
                                    ${question.correctAnswer}) ${question.options[question.correctAnswer]}
                                </span>
                            </div>
                        </div>

                        ${!isCorrect ? createEnhancedExplanationSection(question, index) : ''}
                    </div>
                `;
            }).join('');

            container.innerHTML = questionsHTML;
        }

        // Enhanced explanation section creation
        function createEnhancedExplanationSection(question, questionIndex) {
            return `
                <div class="explanation-section">
                    <button class="explain-btn" onclick="requestExplanation(${questionIndex})" id="explainBtn${questionIndex}">
                        💡 Get detailed explanation for this question
                    </button>
                    <div class="explanation-content" id="explanation${questionIndex}">
                        <!-- Enhanced explanation will be loaded here -->
                    </div>
                </div>
            `;
        }

        // Add enhanced CSS for better explanation display
        const enhancedExplanationCSS = `
        <style>
        .wrong-answer-explanation {
            background: #fef2f2;
            border-left: 4px solid #ef4444;
            padding: 1rem;
            margin-bottom: 1rem;
            border-radius: 0 6px 6px 0;
        }

        .correct-answer-explanation {
            background: #f0fdf4;
            border-left: 4px solid #22c55e;
            padding: 1rem;
            border-radius: 0 6px 6px 0;
        }

        .answer-context {
            background: #f1f5f9;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.75rem;
            color: #475569;
        }

        .explanation-warning {
            animation: slideIn 0.3s ease-out;
        }

        @keyframes slideIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        </style>
        `;

        // Inject enhanced CSS
        document.head.insertAdjacentHTML('beforeend', enhancedExplanationCSS);

        // Show explanation error
        function showExplanationError(explanationDiv, message) {
                    explanationDiv.innerHTML = `
                <div class="explanation-text" style="color: #dc2626;">
                    ❌ ${message}
                </div>
                <div class="explanation-meta">
                    <span>Please try again or contact support if the issue persists.</span>
                </div>
            `;
            explanationDiv.classList.add('show');
        }

        // Utility functions
        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const secs = seconds % 60;
            return `${minutes}m ${secs}s`;
        }

        function retakeQuiz() {
            window.location.href = '/homeStudent';
        }

        function showError(message) {
            document.getElementById('scoreDisplay').textContent = '❌';
            document.getElementById('scoreDetails').innerHTML = `<p style="color: #dc2626;">${message}</p>`;
            document.getElementById('questionResultsContainer').innerHTML = `
                <p style="text-align: center; color: #dc2626; padding: 2rem;">${message}</p>
            `;
        }

        // Store student name for header
        if (typeof studentName !== 'undefined') {
            localStorage.setItem('studentName', studentName);
        }
    </script>
</body>
</html>